grammar no.hal.bdd.BddDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bddDsl "http://www.hal.no/bdd/BddDsl"

Model:
	('model' name = ID)
	(
		(modelRefs += ModelRef) |
		(entityDefs += EntityDef) |
		(scenarios += Scenario)
	)*
;

ModelRef:
	'using' modelRef = [Model]
;

EntityDef:
	'entity' name = (ID | STRING) ('is' superEntities += [EntityDef] (',' superEntities += [EntityDef])*)? '{'
		('actions:' (actions += ActionDef) (',' actions += ActionDef)*)?
		('states:' (states += StateDef) (',' states += StateDef)*)?
		('properties:' (properties += PropertyDef) (',' properties += PropertyDef)*)?
	'}'
;

ActionDef:
	name = WORD (argument = WORD)? ((preposition = PREP)? | (optionalPref ?= '[' preposition = PREP ']'))	
;

PREP: ('on' | 'in' | 'from' | 'to' | 'into');
WORD: ID;


StateDef: postive = StateName ('/' negative = StateName)?;
StateName: name = WORD;

PropertyDef: name = WORD (plural ?= '*')?;

//

ID_OR_STRING: (ID | STRING);

Scenario:
	'Scenario:' name = ID_OR_STRING
	'given' preState = ScenarioState
	'when' 'I' action = ScenarioAction
	'then' postState = ScenarioState
;

ScenarioState:
	states += StatePhrase ('and' states += StatePhrase)*
;

ScenarioAction:
	actions += ActionPhrase ('and' actions += ActionPhrase)*
;

StatePhrase: ScenarioRef | EntityPropertyStatePhrase | EntityStatePhrase;

ScenarioRef:
	scenarioRef = [Scenario | ID_OR_STRING]
;

ENTITY_IDENTITY: '#'? (INT | STRING);

EntityRef:
	('the' entity = [EntityDef | WORD] name = ENTITY_IDENTITY) | (name = ENTITY_IDENTITY)
;

EntityStatePhrase:
	entity = EntityRef 'is' state = [StateName | WORD]
;

EntityPropertyStatePhrase:
	'the' property = [PropertyDef | WORD] 'of' entity = EntityRef
	(('is' value = PropertyValue) | ('are' (values += PropertyValue) (',' values += PropertyValue)*)) 
;

PropertyValue: SimpleValue | ListValue | SetValue;

SimpleValue: IntValue | BooleanValue | StringValue;

ListValue:
	{ListValue} '[' (values += SimpleValue (',' values += SimpleValue)*)? ']'
;

SetValue:
	{SetValue} '{' (values += SimpleValue (',' values += SimpleValue)*)? '}'
;

StringValue:
	value = STRING
;

IntValue:
	value = INT
;

TRUE: ('true' | 'yes');
FALSE: ('false' | 'no');

BooleanValue:
	value = (TRUE | FALSE)
;

ActionPhrase: VerbAction | VerifyAction;

VerbAction:
	action = ActionRef entity = EntityRef
;

ActionRef: verb = [ActionDef | WORD] (argument = PropertyValue)? (preposition = PREP)?;

VerifyAction:
	'assure' state = StatePhrase
;
